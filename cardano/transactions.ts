import {
  Lucid,
  Data,
  Construct,
  C,
  SpendingValidator,
  fromHex,
  Tx,
} from "lucid-cardano";
import { toHex } from "@utils";

// TODO put these to config
const jpgV2Script: SpendingValidator = {
  type: "PlutusV1",
  script:
    "",
};
const jpgV2ScriptAddr =
  "addr1zxj47sy4qxlktqzmkrw8dahe46gtv8seakrshsqz26qnvzypw288a4x0xf8pxgcntelxmyclq83s0ykeehchz2wtspksr3q9nx";
const feeRate = 0.02;
const feeAddr =
  "addr1q9cwvremt6n320s2e3agq0jyq82yhrk3htsu0w426xnz5us70z4w0jgvcdkkynmm8wmds66jd9kusnjfpu6raw5fqp0sr07p5w";
const minFee = 1000000;
const minRoyalty = 1000000;

export type Royalty = {
  address: string;
  rate: number;
};

export type ListingParams = {
  policyId: string;
  tokenNameHex: string;
  price: number;
  royalty?: Royalty;
};

export type DatumParams = ListingParams & { sellerAddr: string };

type RedeemAction = "CANCEL";

const redeemerConstructors: { [action: string]: number } = {
  CANCEL: 0,
};

function getRedeemer(action: RedeemAction) {
  return Data.to(new Construct(redeemerConstructors[action], []));
}

function addrToPkhHex(addr: string) {
  // TODO rewrite this without the use of C
  const pkh = C.BaseAddress.from_address(C.Address.from_bech32(addr))
    ?.payment_cred()
    .to_keyhash();
  if (!pkh) {
    throw new Error("INVALID_ADDR");
  }
  return toHex(pkh.to_bytes());
}

function addrToStakingCredHex(addr: string) {
  // TODO rewrite this without the use of C
  const stakingCredHash = C.BaseAddress.from_address(
    C.Address.from_bech32(addr)
  )
    ?.stake_cred()
    .to_keyhash();
  if (!stakingCredHash) {
    throw new Error("INVALID_ADDR");
  }
  return toHex(stakingCredHash.to_bytes());
}

type Payout = {
  addr: string;
  lovelace: number;
};

function splitPrice(price: number, royalty: Royalty | undefined) {
  const feeLovelace = Math.max(minFee, Math.floor(price * feeRate));
  const royaltyLovelace =
    royalty && royalty.rate > 0
      ? Math.max(minRoyalty, Math.floor(price * royalty?.rate))
      : 0;
  return {
    sellerLovelace: price - feeLovelace - royaltyLovelace,
    feeLovelace,
    royaltyLovelace,
  };
}

function makePayouts(datumParams: DatumParams): Payout[] {
  const payoutValues = splitPrice(datumParams.price, datumParams.royalty);
  const payouts = [];
  if (datumParams.royalty && payoutValues.royaltyLovelace > 0) {
    payouts.push({
      addr: datumParams.royalty.address,
      lovelace: payoutValues.royaltyLovelace,
    });
  }
  payouts.push({
    addr: feeAddr,
    lovelace: payoutValues.feeLovelace,
  });
  payouts.push({
    addr: datumParams.sellerAddr,
    lovelace: payoutValues.sellerLovelace,
  });
  return payouts;
}

function addrToData(addr: string) {
  const paymentCredData = new Construct(0, [addrToPkhHex(addr)]);
  const stakingCredData = new Construct(0, [
    new Construct(0, [new Construct(0, [addrToStakingCredHex(addr)])]),
  ]);
  return new Construct(0, [paymentCredData, stakingCredData]);
}

function payoutToData(payout: Payout) {
  const payoutValue = new Map([
    ["", new Construct(0, [0, new Map([["", payout.lovelace]])])],
  ]);
  return new Construct(0, [addrToData(payout.addr), payoutValue]);
}

function buildDatum(lucid: Lucid, datumParams: DatumParams) {
  const sellerPkhHex = addrToPkhHex(datumParams.sellerAddr);

  const payouts = makePayouts(datumParams);
  const payoutsData = [];
  for (const payout of payouts) {
    payoutsData.push(payoutToData(payout));
  }

  const datumFields = [sellerPkhHex, payoutsData];
  const fullData = new Construct(0, datumFields);
  return Data.to(fullData);
}

async function attachSellOrderMetadata(tx: Tx, datum: string) {
  // Greedily split the datum into pieces of length at most 64
  const splitDatumParts = datum.match(/.{1,64}/g);
  if (!splitDatumParts) {
    throw new Error("UNKNOWN_ERROR");
  }
  for (const [label, metadataRow] of [...splitDatumParts].entries()) {
    tx = await tx.attachMetadata(label, metadataRow);
  }
  tx = await tx.attachMetadata(30, "2"); // Sell order marker
  return tx;
}

export async function makeJpgV2Listing(
  listingParams: ListingParams,
  lucid: Lucid
): Promise<string> {
  const sellerAddr = await lucid.wallet.address();

  const listingDatum = buildDatum(lucid, { ...listingParams, sellerAddr });

  const nftAndDepositAssets = {
    lovelace: BigInt(2000000),
    [listingParams.policyId + listingParams.tokenNameHex]: BigInt(1),
  };

  let newTx = await lucid.newTx();
  newTx = await attachSellOrderMetadata(newTx, listingDatum);
  const tx = await newTx
    .payToContract(jpgV2ScriptAddr, listingDatum, nftAndDepositAssets)
    .complete();

  const signedTx = await tx.sign().complete();
  const txHash = await signedTx.submit();
  return txHash;
}

export async function cancelJpgV2Listing(
  listingParams: ListingParams,
  lucid: Lucid
): Promise<string> {
  const sellerAddr = await lucid.wallet.address();

  const listingDatum = buildDatum(lucid, { ...listingParams, sellerAddr });

  const listingUtxos = (
    await lucid.utxosAtWithUnit(
      jpgV2ScriptAddr,
      listingParams.policyId + listingParams.tokenNameHex
    )
  ).filter((utxo) => {
    return (
      utxo.datumHash &&
      utxo.datumHash ==
        C.hash_plutus_data(
          C.PlutusData.from_bytes(fromHex(listingDatum))
        ).to_hex()
    );
  });
  if (listingUtxos.length == 0) {
    throw new Error("NOT_IN_SCRIPT");
  }

  const tx = await lucid
    .newTx()
    .collectFrom([listingUtxos[0]], getRedeemer("CANCEL"))
    .attachSpendingValidator(jpgV2Script)
    .addSigner(sellerAddr)
    .complete({ datum: listingDatum });

  const signedTx = await tx.sign().complete();

  const txHash = await signedTx.submit();

  return txHash;
}
